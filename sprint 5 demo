#include <cassert>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <regex>
#include <sstream>
#include <string>
#include <vector>

using namespace std;
using filesystem::path;

path operator""_p(const char* data, std::size_t sz) {
    return path(data, data + sz);
}

// напишите эту функцию
bool FindIncludeFile(const path& include_path, const vector<path>& include_directories, path& found_path) {
    for (const auto& dir : include_directories) {
        path full_path = dir / include_path;
        if (filesystem::exists(full_path)) {
            found_path = full_path;
            return true;
        }
    }
    return false;
}

bool ProcessFile(ostream& out, const path& file_path, const vector<path>& include_directories,
                vector<path>& processed_files, int& current_line) {
    if (find(processed_files.begin(), processed_files.end(), file_path) != processed_files.end()) {
        return true;
    }
    processed_files.push_back(file_path);

    ifstream in(file_path);
    if (!in) {
        return false;
    }

    // Исправленные регулярные выражения
    regex include_quote_regex(R"(\s*#\s*include\s*\"([^\"]*)\"\s*)");
    regex include_angle_regex(R"(\s*#\s*include\s*\<([^>]*)\>\s*)");
    smatch match;
    string line;
    int line_number = 0;

    while (getline(in, line)) {
        line_number++;
        current_line = line_number;

        if (regex_match(line, match, include_quote_regex)) {
            string include_file = match[1].str();
            path include_path(include_file);
            path found_path;

            path local_path = file_path.parent_path() / include_path;
            if (filesystem::exists(local_path)) {
                if (!ProcessFile(out, local_path, include_directories, processed_files, current_line)) {
                    return false;
                }
                continue;
            }

            if (!FindIncludeFile(include_path, include_directories, found_path)) {
                cout << "unknown include file \"" << include_file << "\" at file " << file_path.string()
                     << " at line " << line_number << endl;
                return false;
            }
            if (!ProcessFile(out, found_path, include_directories, processed_files, current_line)) {
                return false;
            }
        }
        else if (regex_match(line, match, include_angle_regex)) {
            string include_file = match[1].str();
            path include_path(include_file);
            path found_path;

            if (!FindIncludeFile(include_path, include_directories, found_path)) {
                cout << "unknown include file <" << include_file << "> at file " << file_path.string()
                     << " at line " << line_number << endl;
                return false;
            }
            if (!ProcessFile(out, found_path, include_directories, processed_files, current_line)) {
                return false;
            }
        }
        else {
            out << line << "\n";
        }
    }

    return true;
}

bool Preprocess(const path& in_file, const path& out_file, const vector<path>& include_directories) {
    ifstream test_in(in_file);
    if (!test_in) {
        return false;
    }
    test_in.close();

    ofstream out(out_file);
    if (!out) {
        return false;
    }

    vector<path> processed_files;
    int current_line = 0;
    bool result = ProcessFile(out, in_file, include_directories, processed_files, current_line);

    out.close();

    if (!result) {
        filesystem::remove(out_file);
    }

    return result;
}

string GetFileContents(string file) {
    ifstream stream(file);

    // конструируем string по двум итераторам
    return {(istreambuf_iterator<char>(stream)), istreambuf_iterator<char>()};
}

void Test() {
    error_code err;
    filesystem::remove_all("sources"_p, err);
    filesystem::create_directories("sources"_p / "include2"_p / "lib"_p, err);
    filesystem::create_directories("sources"_p / "include1"_p, err);
    filesystem::create_directories("sources"_p / "dir1"_p / "subdir"_p, err);

    {
        ofstream file("sources/a.cpp");
        file << "// this comment before include\n"
                "#include \"dir1/b.h\"\n"
                "// text between b.h and c.h\n"
                "#include \"dir1/d.h\"\n"
                "\n"
                "int SayHello() {\n"
                "    cout << \"hello, world!\" << endl;\n"
                "#   include<dummy.txt>\n"
                "}\n"s;
    }
    {
        ofstream file("sources/dir1/b.h");
        file << "// text from b.h before include\n"
                "#include \"subdir/c.h\"\n"
                "// text from b.h after include"s;
    }
    {
        ofstream file("sources/dir1/subdir/c.h");
        file << "// text from c.h before include\n"
                "#include <std1.h>\n"
                "// text from c.h after include\n"s;
    }
    {
        ofstream file("sources/dir1/d.h");
        file << "// text from d.h before include\n"
                "#include \"lib/std2.h\"\n"
                "// text from d.h after include\n"s;
    }
    {
        ofstream file("sources/include1/std1.h");
        file << "// std1\n"s;
    }
    {
        ofstream file("sources/include2/lib/std2.h");
        file << "// std2\n"s;
    }

    assert((!Preprocess("sources"_p / "a.cpp"_p, "sources"_p / "a.in"_p,
                                  {"sources"_p / "include1"_p,"sources"_p / "include2"_p})));

    ostringstream test_out;
    test_out << "// this comment before include\n"
                "// text from b.h before include\n"
                "// text from c.h before include\n"
                "// std1\n"
                "// text from c.h after include\n"
                "// text from b.h after include\n"
                "// text between b.h and c.h\n"
                "// text from d.h before include\n"
                "// std2\n"
                "// text from d.h after include\n"
                "\n"
                "int SayHello() {\n"
                "    cout << \"hello, world!\" << endl;\n"s;

    assert(GetFileContents("sources/a.in"s) == test_out.str());
}

int main() {
    Test();
}
